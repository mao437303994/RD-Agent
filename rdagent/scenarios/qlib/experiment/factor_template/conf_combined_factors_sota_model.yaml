qlib_init:
  provider_uri: "~/.qlib/qlib_data/cn_data"
  region: cn

market: &market csi300
benchmark: &benchmark SH000300

task:
  model:
    class: GeneralPTNN
    module_path: qlib.contrib.model.pytorch_general_nn
    kwargs:
      metric: loss
      loss: mse
      n_jobs: 20
      GPU: 0
      pt_model_uri: "model.model_cls"
      n_epochs: {{ n_epochs }}
      lr: {{ lr }}
      early_stop: {{ early_stop }}
      batch_size: {{ batch_size }}
      weight_decay: {{ weight_decay }}
      pt_model_kwargs: {
          "num_features": {{ num_features }}{% if num_timesteps %}, "num_timesteps": {{ num_timesteps }}{% endif %}
      }

  dataset:
    class: {{ dataset_cls | default("DatasetH") }}
    module_path: qlib.data.dataset
    kwargs:
      handler:
        class: DataHandlerLP
        module_path: qlib.contrib.data.handler
        kwargs:
          start_time: 2006-01-01
          end_time: 2025-05-22
          instruments: *market
          data_loader:
            class: NestedDataLoader
            kwargs:
              dataloader_l:
              - class: qlib.contrib.data.loader.Alpha158DL
                kwargs:
                  config:
                    label:
                    - [ "If((Ref($close,-1)/$close-1)>0,1,0)" ]
                    - [ "LABEL0" ]
                    feature:
                    - [ "Resi($close, 5)/$close", "Std(Abs($close/Ref($close, 1)-1)*$volume, 5)/(Mean(Abs($close/Ref($close, 1)-1)*$volume, 5)+1e-12)", "Rsquare($close, 5)", "($high-$low)/$open", "Rsquare($close, 10)", "Corr($close, Log($volume+1), 5)", "Corr($close/Ref($close,1), Log($volume/Ref($volume, 1)+1), 5)", "Corr($close, Log($volume+1), 10)", "Ref($close, 60)/$close", "Resi($close, 10)/$close", "Std($volume, 5)/($volume+1e-12)", "Rsquare($close, 60)", "Corr($close, Log($volume+1), 60)", "Std(Abs($close/Ref($close, 1)-1)*$volume, 60)/(Mean(Abs($close/Ref($close, 1)-1)*$volume, 60)+1e-12)", "Std($close, 5)/$close", "Rsquare($close, 20)", "Corr($close/Ref($close,1), Log($volume/Ref($volume, 1)+1), 60)", "Corr($close/Ref($close,1), Log($volume/Ref($volume, 1)+1), 10)", "Corr($close, Log($volume+1), 20)", "(Less($open, $close)-$low)/$open" ]
                    - [ "RESI5", "WVMA5", "RSQR5", "KLEN", "RSQR10", "CORR5", "CORD5", "CORR10", "ROC60", "RESI10", "VSTD5", "RSQR60", "CORR60", "WVMA60", "STD5", "RSQR20", "CORD60", "CORD10", "CORR20", "KLOW" ]
              - class: qlib.data.dataset.loader.StaticDataLoader
                kwargs:
                  config: "combined_factors_df.parquet"
          infer_processors:
          - class: ZScoreNorm
            kwargs:
            fields_group: feature
          - class: Fillna
            kwargs:
              fields_group: feature
          learn_processors:
          - class: DropnaLabel

      segments:
        train: [ 2006-01-01, 2017-08-14 ]
        valid: [ 2017-08-15, 2021-06-29 ]
        test: [ 2021-06-30, 2025-05-22 ]
        {% if step_len %}step_len: {{ step_len }}{% endif %}

  record:
  - class: SignalRecord
    module_path: qlib.workflow.record_temp
    kwargs:
      model: <MODEL>
      dataset: <DATASET>
  - class: SigAnaRecord
    module_path: qlib.workflow.record_temp
    kwargs: 
      ana_long_short: False
      ann_scaler: 252
  # - class: PortAnaRecord
  #   module_path: qlib.workflow.record_temp
  #   kwargs: 
  #     config: 
  #         strategy:
  #             class: TopkDropoutStrategy
  #             module_path: qlib.contrib.strategy
  #             kwargs:
  #                 signal: <PRED>
  #                 topk: 50
  #                 n_drop: 5
  #         backtest:
  #             start_time: 2017-01-01
  #             end_time: 2020-08-01
  #             account: 100000000
  #             benchmark: *benchmark
  #             exchange_kwargs:
  #                 limit_threshold: 0.095
  #                 deal_price: close
  #                 open_cost: 0.0005
  #                 close_cost: 0.0015
  #                 min_cost: 5
