qlib_init:
  provider_uri: "~/.qlib/qlib_data/cn_data"
  region: cn

market: &market csi300
benchmark: &benchmark SH000300

task:
  model:
    class: LGBModel
    module_path: qlib.contrib.model.gbdt
    kwargs:
      objective: binary
      metric: binary_logloss
      verbosity: -1
      boosting_type: gbdt
      learning_rate: 0.0540573778890074
      num_leaves: 47
      max_depth: 3
      lambda_l1: 0.005448745443420065
      lambda_l2: 4.2068022977633275
      feature_fraction: 0.9175216653656415
      bagging_fraction: 0.9108460795811167
      bagging_freq: 1

  dataset:
    class: DatasetH
    module_path: qlib.data.dataset
    kwargs:
      handler:
        class: Alpha158
        module_path: qlib.contrib.data.handler
        kwargs:
          start_time: 2006-01-01
          end_time: 2025-05-22
          fit_start_time: 2006-01-01
          fit_end_time: 2021-06-29
          instruments: *market
          infer_processors:
          - class: FilterCol
            kwargs:
              fields_group: feature
              col_list: [ "RESI5", "WVMA5", "RSQR5", "KLEN", "RSQR10", "CORR5", "CORD5", "CORD10", "ROC60", "RESI10", "VSTD5", "RSQR60", "CORR60", "WVMA60", "STD5", "RSQR20", "CORD60", "CORD10", "CORR20", "KLOW" ]
          - class: ZScoreNorm
            kwargs:
            fields_group: feature
          - class: Fillna
            kwargs:
              fields_group: feature
          learn_processors:
          - class: DropnaLabel
          label: [ "If((Ref($close,-1)/$close-1)>0,1,0)" ]

      segments:
        train: [ 2006-01-01, 2017-08-14 ]
        valid: [ 2017-08-15, 2021-06-29 ]
        test: [ 2021-06-30, 2025-05-22 ]

  record:
  - class: SignalRecord
    module_path: qlib.workflow.record_temp
    kwargs:
      model: <MODEL>
      dataset: <DATASET>
  - class: SigAnaRecord
    module_path: qlib.workflow.record_temp
    kwargs:
      ana_long_short: False
      ann_scaler: 252
  # - class: PortAnaRecord
  #   module_path: qlib.workflow.record_temp
  #   kwargs: 
  #     config: 
  #         strategy:
  #             class: TopkDropoutStrategy
  #             module_path: qlib.contrib.strategy
  #             kwargs:
  #                 signal: <PRED>
  #                 topk: 50
  #                 n_drop: 5
  #         backtest:
  #             start_time: 2017-01-01
  #             end_time: 2020-08-01
  #             account: 100000000
  #             benchmark: *benchmark
  #             exchange_kwargs:
  #                 limit_threshold: 0.095
  #                 deal_price: close
  #                 open_cost: 0.0005
  #                 close_cost: 0.0015
  #                 min_cost: 5
